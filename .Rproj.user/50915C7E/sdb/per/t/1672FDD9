{
    "collab_server" : "",
    "contents" : "####################################################################################################################################\n### Filename:    GUI.R\n### Description: Functions to provide a graphical user interface; \n###              'hrm.GUI' is only dealing with the input provided by the user and then calls the function 'hrm_test'\n###\n###\n####################################################################################################################################\n# library(RGtk2)\n# result <- data.frame(a=1:2, b=1:2, c=1:2, d=1:2, e=1:2, f=1:2)\n# gui.results(result, \".\", \",\")\n#' Function for displaying and saving the results of the function 'hrm_test' within the function 'hrm.GUI'\n#' \n#' @param result data.frame from the ouput of the function hrm_test\n#' @param factors list containing the column names of the factors, first elements are the wholeplot factors, second the subplot factors\n#' @param dec decimal mark\n#' @param sep seperation mark for saving\n#' @keywords internal\ngui.results <- function(result, factors, dec, sep) {\n  \n  result[,2:6] <- format(result[,2:6], digits = 2, decimal.mark = dec)\n  result[ ,6] <- ifelse (result[, 6]<0.001 , gsub(\" \", \"\", paste(\"<0\", dec, \"001\"), fixed = TRUE),result[, 6])\n  \n  \n  # window for results\n  windowR <- RGtk2::gtkWindow()\n  windowR[\"title\"] <- \"HRM\"\n  \n  quit_cb <- function(widget, window){\n    window$destroy()\n  }\n  save_LaTeX_cb <- function(widget, window){\n    directory <- NULL\n    tryCatch(directory <- tclvalue(tkchooseDirectory(initialdir=getwd())), error = function(e){  \"\" }, warning = function(w) \"\")\n    if(!is.null(directory) & !is.na(directory) & directory != \"\"){\n      tryCatch({\n        fileConn <- file(paste(directory,\"\\\\result_HRM_analysis.tex\",sep=\"\"))\n        writeLines(print(xtable(result), include.rownames = FALSE), fileConn)\n        close(fileConn)\n      }, error = function(e) { GUI_error(e, \"An error occured while saving the results:\")})\n    }\n  }\n  save_cb <- function(widget, window){\n    directory <- NULL\n    tryCatch(directory <- tclvalue(tkchooseDirectory(initialdir=getwd())), error = function(e){  \"\" }, warning = function(w) \"\")\n    if(!is.null(directory) & !is.na(directory) & directory != \"\"){\n      tryCatch({\n        write.table(print(result, row.names = FALSE), file = paste(directory,\"\\\\result_HRM_analysis.txt\",sep=\"\"), sep = \"\\t\", quote = FALSE, row.names = FALSE)\n      }, error = function(e) { GUI_error(e, \"An error occured while saving the results:\")})\n    } \n  }\n  actions <- list(\n    list(\"FileMenu\", NULL, \"_File\"),\n    #  list(\"Open\", \"gtk-open\", \"_Open File\", \"<control>O\", \"Open CSV\", quit_cb),\n    list(\"Save\", \"gtk-save\", \"_Save as LaTeX Table\", \"<control>S\", \"Save CSV\", save_LaTeX_cb),\n    list(\"Save2\", \"gtk-save\", \"_Save File\", \"<control>S\", \"Save2 CSV\", save_cb),\n    list(\"Exit\", \"gtk-quit\", \"E_xit\", \"<control>X\", \"Exit\", quit_cb)\n  )\n  action_group <- RGtk2::gtkActionGroup(\"spreadsheetActions\")\n  action_group$addActions(actions, windowR)\n  \n  uiManager <- RGtk2::gtkUIManager()\n  uiManager$insertActionGroup(action_group, 0)\n  merge <- uiManager$newMergeId()\n  # File Menu\n  uiManager$addUi(merge.id = merge, path = \"/\", name = \"menubar\",\n                  action = NULL, type = \"menubar\", top = FALSE)\n  uiManager$addUi(merge, \"/menubar\", \"file\", \"FileMenu\", \"menu\", FALSE)\n  #uiManager$addUi(merge, \"/menubar/file\", \"open\", \"Open\", \"menuitem\", FALSE)\n  uiManager$addUi(merge, \"/menubar/file\", \"save\", \"Save\", \"menuitem\", FALSE)\n  uiManager$addUi(merge, \"/menubar/file\", \"save2\", \"Save2\", \"menuitem\", FALSE)\n  uiManager$addUi(merge, \"/menubar/file\", NULL, NULL, \"separator\", FALSE)\n  uiManager$addUi(merge, \"/menubar/file\", \"exit\", \"Exit\", \"menuitem\", FALSE)\n  \n  # TooLbar\n  uiManager$addUi(merge, \"/\", \"toolbar\", NULL, \"toolbar\", FALSE)\n  #uiManager$addUi(merge, \"/toolbar\", \"open\", \"Open\", \"toolitem\", FALSE)\n  uiManager$addUi(merge, \"/toolbar\", \"save\", \"Save\", \"toolitem\", FALSE)\n  uiManager$addUi(merge, \"/toolbar\", \"save2\", \"Save2\", \"toolitem\", FALSE)\n  uiManager$addUi(merge, \"/toolbar\", \"exit\", \"Exit\", \"toolitem\", FALSE)\n  \n  menubar <- uiManager$getWidget(\"/menubar\")\n  toolbar <- uiManager$getWidget(\"/toolbar\")\n  windowR$addAccelGroup(uiManager$getAccelGroup())\n  \n  vBox <- RGtk2::gtkVBox()\n  windowR$add(vBox)\n  vBox$packStart(menubar, expand = FALSE, fill = FALSE, padding = 0)\n  vBox$packStart(toolbar, FALSE, FALSE, 0)\n  \n  hbox = RGtk2::gtkHBoxNew(homogeneous = FALSE, spacing = 0)\n  #windowR$add(hbox)\n  vBox$packStart(hbox)\n  vboxLoad = RGtk2::gtkVBoxNew(homogeneous = FALSE, spacing = 0)\n  vboxLoad$setSizeRequest(800,500)\n  hbox$add(vboxLoad)\n  \n  scroll = RGtk2::gtkScrolledWindow()\n  vbox2 = RGtk2::gtkVBoxNew(homogeneous = FALSE, spacing = 0)\n  \n  scroll$addWithViewport(vbox2)\n  vboxLoad$add(scroll)\n  \n  frameR <- RGtk2::gtkFrameNew(\"Results\")\n  vbox2$add(frameR)\n\n  vBoxR <- RGtk2::gtkVBoxNew()\n  vBoxR$setBorderWidth(20)\n  frameR$add(vBoxR)   #add vBox to the frame\n\n  hBoxR0 <- RGtk2::gtkHBoxNew(spacing= 10) #distance between elements\n  hBoxR0$setBorderWidth(20)\n  vBoxR$packStart(hBoxR0, F, F, 0)\n\n  l <- RGtk2::gtkLabelNew(paste(\"wholeplot-factors: \", paste0(factors[[1]], sep=\", \", collapse = \"\") ))\n  hBoxR0$packStart(l)\n  \n  l <- RGtk2::gtkLabelNew(paste(\"subplot-factors: \", paste0(factors[[2]], sep=\", \", collapse = \"\") ))\n  hBoxR0$packStart(l)\n  \n  hBoxR <- RGtk2::gtkHBoxNew(spacing= 10) #distance between elements\n  hBoxR$setBorderWidth(20)\n  vBoxR$packStart(hBoxR, F, F, 0)\n  for(i in 1:7){\n    l <- RGtk2::gtkLabelNew(colnames(result)[i])\n    RGtk2::gtkLabelSetWidthChars(l, 11)\n    if(i == 1){\n      RGtk2::gtkLabelSetWidthChars(l, 20)\n    }\n    hBoxR$packStart(l, F, F, 0)\n    \n  }\n\n  # first Row\n  for(i in 1:dim(result)[1]){\n    hBoxR <- RGtk2::gtkHBoxNew(spacing= 10) #distance between elements\n    hBoxR$setBorderWidth(2)\n    vBoxR$packStart(hBoxR, F, F, 0)\n    l <- RGtk2::gtkLabelNew(result[i,1])\n    RGtk2::gtkLabelSetWidthChars(l, 20)\n    hBoxR$packStart(l, F, F, 0)\n    RGtk2::gtkLabelSetLineWrap(l, TRUE) # automatic line breaks, if text ist too long\n\n    t <- RGtk2::gtkEntryNew()\n    t$setWidthChars(10)\n    RGtk2::gtkEntrySetText(t, result[i,2])\n    hBoxR$packStart(t, F, F, 0)\n\n    t <- RGtk2::gtkEntryNew()\n    t$setWidthChars(10)\n    RGtk2::gtkEntrySetText(t, result[i,3])\n    hBoxR$packStart(t, F, F, 0)\n\n    t <- RGtk2::gtkEntryNew()\n    t$setWidthChars(10)\n    RGtk2::gtkEntrySetText(t, result[i,4])\n    hBoxR$packStart(t, F, F, 0)\n\n    t <- RGtk2::gtkEntryNew()\n    t$setWidthChars(10)\n    RGtk2::gtkEntrySetText(t, result[i,5])\n    hBoxR$packStart(t, F, F, 0)\n\n    t <- RGtk2::gtkEntryNew()\n    t$setWidthChars(10)\n    RGtk2::gtkEntrySetText(t, result[i,6])\n    hBoxR$packStart(t, F, F, 0)\n\n    t <- RGtk2::gtkLabelNew()\n    t$setWidthChars(10)\n    RGtk2::gtkLabelSetText(t, result[i,7])\n    hBoxR$packStart(t, F, F, 0)\n  }\n  \n  hBoxR <- RGtk2::gtkHBoxNew(spacing= 10) #distance between elements\n  hBoxR$setBorderWidth(20)\n  vBoxR$packStart(hBoxR, F, F, 0)\n  t <- RGtk2::gtkLabelNew()\n  RGtk2::gtkLabelSetText(t, paste(\"Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\"))\n  hBoxR$packStart(t, F, F, 0)\n  \n  \n  # Functions for Handling the events to save the results\n  # save results as LaTeX Code\n  saveResults <- function(object, user.data){\n    result <- user.data\n    directory <- NULL\n    tryCatch(directory <- tclvalue(tkchooseDirectory(initialdir=getwd())), error = function(e){  \"\" }, warning = function(w) \"\")\n    if(!is.null(directory) & !is.na(directory) & directory != \"\"){\n      tryCatch({\n        fileConn <- file(paste(directory,\"\\\\result_HRM_analysis.tex\",sep=\"\"))\n        writeLines(print(xtable(result), include.rownames = FALSE), fileConn)\n        close(fileConn)\n      }, error = function(e) { GUI_error(e, \"An error occured while saving the results:\")})\n    }\n  }\n  # save results as plain text\n  saveResults2 <- function(object, user.data){\n    result <- user.data\n    directory <- NULL\n    tryCatch(directory <- tclvalue(tkchooseDirectory(initialdir=getwd())), error = function(e){  \"\" }, warning = function(w) \"\")\n    if(!is.null(directory) & !is.na(directory) & directory != \"\"){\n      tryCatch({\n        write.table(print(result, row.names = FALSE), file = paste(directory,\"\\\\result_HRM_analysis.txt\",sep=\"\"), sep = \"\\t\", quote = FALSE, row.names = FALSE)\n      }, error = function(e) { GUI_error(e, \"An error occured while saving the results:\")})\n    }  \n  }\n  \n  \n  hBoxR <- RGtk2::gtkHBoxNew(spacing= 10) #distance between elements\n  hBoxR$setBorderWidth(20)\n  vBoxR$packStart(hBoxR, F, F, 0)\n  \n  \n  saveButton <- RGtk2::gtkButton(\"Save Results as LaTeX Code\")\n  hBoxR$packStart(saveButton, T, T, 0)\n  \n  saveButton2 <- RGtk2::gtkButton(\"Save Results as Plain Text\")\n  hBoxR$packStart(saveButton2, T, T, 0)\n  \n  closeButton <- RGtk2::gtkButton(\"Close\")\n  hBoxR$packStart(closeButton, T, T, 0)\n  \n  \n  # Event Handling\n  RGtk2:: gSignalConnect(closeButton, \"clicked\", windowR$destroy)\n  RGtk2:: gSignalConnect(saveButton, \"clicked\", saveResults, data = result)\n  RGtk2:: gSignalConnect(saveButton2, \"clicked\", saveResults2, data = result)\n  \n  \n}\n\n#' Graphical User Interface (R Package RGtk2 needed) for the Function 'hrm_test': Test for main effects and interaction effects of one or two between-subject factors and one, two or three within-subject factors (at most four factors can be used).\n#' \n#' @return The results can be saved as LaTeX Code or as plain text. Additionally a plot of the group profiles an be saved when using one whole- and one subplot factor. \n#' @keywords export\nhrm.GUI <- function(){\n  \n  # variable to temporarily store the loaded data from the user\n  tmp <- NULL\n  \n  # loading the RGtk2 package; stops if it cannot be loaded.\n  requireNamespace(\"RGtk2\", quietly = TRUE)\n  if(!(\"package:RGtk2\" %in% search())){attachNamespace(\"RGtk2\")}\n  if(!isNamespaceLoaded(\"RGtk2\")){\n    stop(\"The package 'RGkt2' is needed for using the graphical user interface.\\nPlease install this package or use the function 'hrm_test' from package 'HRM' to perform the analysis without GUI.\")\n  }\n  # loading the cairoDevice package; stops if it cannot be loaded.\n  requireNamespace(\"cairoDevice\", quietly = TRUE)\n  if(!(\"package:cairoDevice\" %in% search())){attachNamespace(\"cairoDevice\")}\n  if(!isNamespaceLoaded(\"cairoDevice\")){\n    stop(\"The package 'cairoDevice' is needed for using the graphical user interface.\\nPlease install this package or use the function 'hrm_test' from package 'HRM' to perform the analysis without GUI.\")\n  }\n  # loading the RGtk2Extras package; stops if it cannot be loaded.\n  requireNamespace(\"RGtk2Extras\", quietly = TRUE)\n  if(!(\"package:RGtk2Extras\" %in% search())){attachNamespace(\"RGtk2Extras\")}\n  if(!isNamespaceLoaded(\"RGtk2Extras\")){\n    stop(\"The package 'RGtk2Extras' is needed for using the graphical user interface.\\nPlease install this package or use the function 'hrm_test' from package 'HRM' to perform the analysis without GUI.\")\n  }\n  \n  # Functions for Menubar\n  quit_cb <- function(widget, window){\n    window$destroy()\n  }\n  open_cb <- function(widget, window){\n    getDirectory(NULL, NULL)\n  }\n  results_cb <- function(widget, window){\n    calculate(NULL, NULL)\n  }\n  view_cb <- function(widget, window){\n    RGtk2Extras::dfview(tmp)\n  }\n  \n  window <- RGtk2::gtkWindow()\n  window[\"title\"] <- \"HRM\"\n  \n  actions <- list(\n    list(\"FileMenu\", NULL, \"_File\"),\n    list(\"Open\", \"gtk-open\", \"_Open File\", \"<control>O\", \"Open CSV\", open_cb),\n    list(\"View Data\", \"gtk-open\", \"_View Data\", \"<control>V\", \"View CSV\", view_cb),\n    list(\"Get Results\", \"gtk-open\", \"Get _Results\", \"<control>R\", \"Get Results\", results_cb),\n    list(\"Exit\", \"gtk-quit\", \"E_xit\", \"<control>X\", \"Exit\", quit_cb)\n  )\n  action_group <- RGtk2::gtkActionGroup(\"spreadsheetActions\")\n  action_group$addActions(actions, window)\n  \n  uiManager <- RGtk2::gtkUIManager()\n  uiManager$insertActionGroup(action_group, 0)\n  merge <- uiManager$newMergeId()\n  # File Menu\n  uiManager$addUi(merge.id = merge, path = \"/\", name = \"menubar\",\n                  action = NULL, type = \"menubar\", top = FALSE)\n  uiManager$addUi(merge, \"/menubar\", \"file\", \"FileMenu\", \"menu\", FALSE)\n  uiManager$addUi(merge, \"/menubar/file\", \"open\", \"Open\", \"menuitem\", FALSE)\n  uiManager$addUi(merge, \"/menubar/file\", \"view\", \"View Data\", \"menuitem\", FALSE)\n  uiManager$addUi(merge, \"/menubar/file\", \"Calculate\", \"Get Results\", \"menuitem\", FALSE)\n  uiManager$addUi(merge, \"/menubar/file\", NULL, NULL, \"separator\", FALSE)\n  uiManager$addUi(merge, \"/menubar/file\", \"exit\", \"Exit\", \"menuitem\", FALSE)\n  \n  # TooLbar\n  uiManager$addUi(merge, \"/\", \"toolbar\", NULL, \"toolbar\", FALSE)\n  uiManager$addUi(merge, \"/toolbar\", \"open\", \"Open\", \"toolitem\", FALSE)\n  uiManager$addUi(merge, \"/toolbar\", \"view\", \"View Data\", \"toolitem\", FALSE)\n  uiManager$addUi(merge, \"/toolbar\", \"Calculate\", \"Get Results\", \"toolitem\", FALSE)\n  uiManager$addUi(merge, \"/toolbar\", \"exit\", \"Exit\", \"toolitem\", FALSE)\n  \n  menubar <- uiManager$getWidget(\"/menubar\")\n  toolbar <- uiManager$getWidget(\"/toolbar\")\n  window$addAccelGroup(uiManager$getAccelGroup())\n  \n  vBoxM <- RGtk2::gtkVBox()\n  window$add(vBoxM)\n  vBoxM$packStart(menubar, expand = FALSE, fill = FALSE, padding = 0)\n  vBoxM$packStart(toolbar, FALSE, FALSE, 0)\n  \n  frame <- RGtk2::gtkFrameNew(\"Loading Data\")\n  #window$add(frame)\n  vBoxM$packStart(frame)\n  # Creating one vertical Box, which consists of multiple horizontal Boxes\n  \n  vBox <- RGtk2::gtkVBoxNew()\n  vBox$setBorderWidth(20)\n  frame$add(vBox)   #add vBox to the frame\n\n  # first Row\n  \n  hBox <- RGtk2::gtkHBoxNew(spacing= 10) #distance between elements\n  hBox$setBorderWidth(20)\n  vBox$packStart(hBox, F, F, 0)\n  \n  \n  labelPath <- RGtk2::gtkLabelNewWithMnemonic(\"File-Path:\")\n  hBox$packStart(labelPath, F, F, 0)\n  \n  pathEntry <- RGtk2::gtkEntryNew()\n  pathEntry$setWidthChars(60)\n  hBox$packStart(pathEntry, F, F, 0)\n\n  loadButton <- RGtk2::gtkButton(\"Load Data\")\n  hBox$packStart(loadButton, F, F, 10)\n  \n  labelPath2 <- RGtk2::gtkLabelNewWithMnemonic(\"Data needs to be in a long table format,\\ni.e. all measurements have to be in one column.\")\n  hBox$packStart(labelPath2, F, F, 0)\n  \n  # additional for first row\n  \n  hBox1 <- RGtk2::gtkHBoxNew(spacing= 10) #distance between elements\n  hBox1$setBorderWidth(20)\n  vBox$packStart(hBox1, F, F, 0)\n  \n  \n  labelSep <- RGtk2::gtkLabelNewWithMnemonic(\"Seperator:\") \n  hBox1$packStart(labelSep, F, F, 0)\n  \n  sepEntry <- RGtk2::gtkEntryNew()\n  sepEntry$setWidthChars(1)\n  hBox1$packStart(sepEntry, F, F, 0)\n  RGtk2::gtkEntrySetText(sepEntry,\",\")\n  \n  labelDec <- RGtk2::gtkLabelNewWithMnemonic(\"Decimal:\")\n  hBox1$packStart(labelDec, F, F, 0)\n  \n  decEntry <- RGtk2::gtkEntryNew()\n  decEntry$setWidthChars(1)\n  hBox1$packStart(decEntry, F, F, 0)\n  RGtk2::gtkEntrySetText(decEntry,\".\")\n  \n  labelHeader <- RGtk2::gtkLabelNewWithMnemonic(\"Header:\") \n  hBox1$packStart(labelHeader, F, F, 0)\n  \n  headerCheck <- RGtk2::gtkCheckButtonNew()\n  hBox1$packStart(headerCheck, F, F, 0)\n  headerCheck$active <- TRUE\n  \n  # second Row\n  \n  hBox2 <- RGtk2::gtkHBoxNew(spacing= 10) #distance between elements\n  hBox2$setBorderWidth(20)\n  vBox$packStart(hBox2, F, F, 0)\n  \n  labelFormula = RGtk2::gtkLabelNewWithMnemonic(\"Formula:\") \n  hBox2$packStart(labelFormula, F, F, 0)\n  \n  formulaEntry <- RGtk2::gtkEntryNew()\n  formulaEntry$setWidthChars(60)\n  hBox2$packStart(formulaEntry, F, F, 0)\n  \n  labelFormula2 = RGtk2::gtkLabelNewWithMnemonic(\"e.g. measurement ~ groupfactor * timefactor\")\n  hBox2$packStart(labelFormula2, F, F, 0)\n  \n  # third Row\n  \n  hBox3 <- RGtk2::gtkHBoxNew(spacing= 10) #distance between elements\n  hBox3$setBorderWidth(20)\n  vBox$packStart(hBox3, F, F, 0)\n  \n  labelColumns = RGtk2::gtkLabelNewWithMnemonic(\"Columns:\")\n  hBox3$packStart(labelColumns, F, F, 0)\n  \n  model<-RGtk2::rGtkDataFrame(c(\"No Data Loaded\"))\n  columnsCombo = RGtk2::gtkComboBox() #text label\n  crt <- RGtk2::gtkCellRendererText()\n  columnsCombo$packStart(crt)\n  columnsCombo$addAttribute(crt, \"text\", 0)\n  \n  RGtk2::gtkComboBoxSetActive(columnsCombo,0)\n  hBox3$packStart(columnsCombo, F, F, 0)\n  \n  explButton <- RGtk2::gtkButton(\"Explained by (~)\")\n  hBox3$packStart(explButton, T, T, 0)\n  \n  plusButton <- RGtk2::gtkButton(\"Additive (+)\")\n  hBox3$packStart(plusButton, T, T, 0)\n  \n  interactionButton <- RGtk2::gtkButton(\"Interaction Only (:)\")\n  hBox3$packStart(interactionButton, T, T, 0)\n  \n  fullButton <- RGtk2::gtkButton(\"Additive and Interaction (*)\")\n  hBox3$packStart(fullButton, T, T, 0)\n\n  # fourth Row\n  \n  hBox4 <- RGtk2::gtkHBoxNew(spacing= 10) #distance between elements\n  hBox4$setBorderWidth(20)\n  vBox$packStart(hBox4, F, F, 0)\n  \n  labelSubject = RGtk2::gtkLabelNewWithMnemonic(\"Subject Column:\")\n  hBox4$packStart(labelSubject, F, F, 0)\n  \n  subjectEntry <- RGtk2::gtkEntryNew()\n  subjectEntry$setWidthChars(52)\n\n  modelS<-RGtk2::rGtkDataFrame(c(\"No Data Loaded\"))\n  columnsSCombo = RGtk2::gtkComboBox() \n  crt2 <- RGtk2::gtkCellRendererText()\n  columnsSCombo$packStart(crt2)\n  columnsSCombo$addAttribute(crt2, \"text\", 0)\n  \n  # labelSubject2 = RGtk2::gtkLabelNewWithMnemonic(\"Choose a Column:\")\n  # hBox4$packStart(labelSubject2, F, F, 0)\n  \n  RGtk2::gtkComboBoxSetActive(columnsSCombo,0)\n  hBox4$packStart(columnsSCombo, F, F, 0)\n  \n  # fifth Row\n  \n  hBox5 <- RGtk2::gtkHBoxNew(spacing= 10) #distance between elements\n  hBox5$setBorderWidth(20)\n  vBox$packStart(hBox5, F, F, 0)\n  \n  labelType1 = RGtk2::gtkLabelNewWithMnemonic(\"Type-I Error Rate:\")\n  hBox5$packStart(labelType1, F, F, 0)\n  \n  type1Entry <- RGtk2::gtkEntryNew()\n  type1Entry$setWidthChars(52)\n  hBox5$packStart(type1Entry, F, F, 0)\n  RGtk2::gtkEntrySetText(type1Entry, \"0.05\")\n  \n  # last Row\n  \n  hBox6 <- RGtk2::gtkHBoxNew(spacing= 10) #distance between elements\n  hBox6$setBorderWidth(20)\n  vBox$packStart(hBox6, F, F, 0)\n  \n  okButton <- RGtk2::gtkButton(\"OK\")\n  hBox6$packStart(okButton, T, T, 0)\n  \n  closeButton <- RGtk2::gtkButton(\"Close\")\n  hBox6$packStart(closeButton, T, T, 0)\n  \n \n  \n  # function for loading the data file\n  getDirectory <- function(object, user.data){\n    directory <- NULL\n    # get the path to the file\n    tryCatch({directory <- tclvalue(tkgetOpenFile(initialdir=getwd())) \n    stopifnot(directory!=\"\")\n    \n    RGtk2::gtkEntrySetText(pathEntry, directory)\n    \n    sep <- RGtk2::gtkEntryGetText(sepEntry)\n    dec <- RGtk2::gtkEntryGetText(decEntry)\n    header <- headerCheck$active}, error = function(e) \"\", warning = function(w) \"\")\n    \n    # read the file given there is a valid path\n    if(!is.null(directory) & directory != \"\"){\n      tryCatch({tmp <<- read.table(directory, sep=sep, dec=dec, header=header)\n      model<-RGtk2::rGtkDataFrame(c(\"choose\", colnames(tmp)))\n      modelS<-RGtk2::rGtkDataFrame(c(\"choose\", colnames(tmp)))\n      RGtk2::gtkComboBoxSetModel(columnsCombo, model)\n      RGtk2::gtkComboBoxSetModel(columnsSCombo, modelS)}, error = function(e) { GUI_error(e, \"There was a problem to load the data:\")} )\n      \n      RGtk2::gtkEntrySetText(formulaEntry, \"\")\n    }\n  }\n  \n  setFormulaCombo <- function(object, user.data){\n    column <- colnames(tmp)[RGtk2::gtkComboBoxGetActive(object)]\n    RGtk2::gtkEditableInsertText(formulaEntry, paste(column,\"\"), position = RGtk2::gtkEntryGetTextLength(formulaEntry))\n  }\n  \n  setFormulaComboS <- function(object, user.data){\n    column <- colnames(tmp)[RGtk2::gtkComboBoxGetActive(object)]\n    RGtk2::gtkEntrySetText(subjectEntry, gsub(\" \", \"\", paste(column, \"\"), fixed = TRUE))\n  }\n  \n  setFormulaPlus <- function(object, user.data){\n    RGtk2::gtkEditableInsertText(formulaEntry, paste(\"+\",\"\"), position = RGtk2::gtkEntryGetTextLength(formulaEntry))\n  }\n  \n  setFormulaInteraction <- function(object, user.data){\n    RGtk2::gtkEditableInsertText(formulaEntry, paste(\":\",\"\"), position = RGtk2::gtkEntryGetTextLength(formulaEntry))\n  }\n  \n  setFormulaFull <- function(object, user.data){\n    RGtk2::gtkEditableInsertText(formulaEntry, paste(\"*\",\"\"), position = RGtk2::gtkEntryGetTextLength(formulaEntry))\n  }\n  \n  setFormulaExpl <- function(object, user.data){\n    RGtk2::gtkEditableInsertText(formulaEntry, paste(\"~\",\"\"), position = RGtk2::gtkEntryGetTextLength(formulaEntry))\n  }\n  \n  calculate <- function(object, user.data){\n    \n    errorOccured <- 0\n    alpha <- NA\n    \n    # verifying the input for the formula, subject and alpha error and calculation of the test statistics\n    if(is.character(RGtk2::gtkEntryGetText(formulaEntry)) & is.character(RGtk2::gtkEntryGetText(subjectEntry))) {\n      if(nchar(RGtk2::gtkEntryGetText(formulaEntry))>0 & nchar(RGtk2::gtkEntryGetText(subjectEntry))>0){\n        \n        tryCatch(formula <- as.formula(RGtk2::gtkEntryGetText(formulaEntry)), error = function(e) {GUI_error(e, \"There is a problem with your formula:\")\n          errorOccured <<- 1} )\n        \n        if(errorOccured == 0){\n          factors <- attributes(terms.formula(formula))$term.labels\n          \n          tryCatch({\n            subject <- RGtk2::gtkEntryGetText(subjectEntry)\n            tmp[,subject] <- as.factor(tmp[,subject])\n          }, error = function(e) {GUI_error(e, \"Please check the column name for the subject:\")\n            errorOccured <<- 1} )\n          \n          tmpSubset = subset(tmp, tmp$subject == tmp$subject[1])\n          groupFactor <- NULL\n          timeFactor <- NULL\n          nfactors <- 0 # to count, how many factors there are used\n          for(i in 1:length(factors)){\n            factorsSplit <- unlist(strsplit(factors[i], \":\"))\n            if(length(factorsSplit)==1 & errorOccured == 0){\n              nfactors <- nfactors + 1\n              tryCatch({            \n                tmp[,factorsSplit] <- as.factor(tmp[,factorsSplit])\n                if(nlevels(tmp[,factorsSplit]) == dim(tmpSubset)[1] ){\n                  timeFactor <- factorsSplit\n                } else if(nlevels(tmp[,factorsSplit]) < dim(tmpSubset)[1] ){\n                  groupFactor <- factorsSplit\n                } \n              }, error = function(e) {GUI_error(e, \"There is a problem with your formula for the explaining variables.\")\n                errorOccured <<- 1} )\n            }\n          }\n          tryCatch(alpha <- as.double(RGtk2::gtkEntryGetText(type1Entry)), warning = function(w) { GUI_error(w, \"The Type-I error rate needs to be numeric.\")}, error = function(e) { GUI_error(e, \"The Type-I error rate needs to be numeric.\")})\n          tryCatch(responseVariable <- as.character(terms.formula(formula)[[2]]), warning = function(w) \"\", error = function(e) \"\" )\n          \n          tryCatch({\n            if(!is.numeric(tmp[,responseVariable])){\n              GUI_error(NULL, \"The response variable needs to be numeric.\")\n              errorOccured <- 1\n            }\n          }, warning = function(w) \"\", error = function(e) {GUI_error(e, \"There is a problem with your formula for the response variable.\")\n            errorOccured <<- 1})\n        }\n\n\n        if(!is.na(alpha) & errorOccured == 0){\n          if(alpha > 0 & alpha < 1) {\n            # if the input by the user is fine, then do the caluclation\n            tryCatch({\n                result <- hrm_test(formula = formula, data = tmp, alpha = alpha, subject = subject )\n                \n                # determin which columns are whole- and subplot factors\n                dat <- model.frame(formula, tmp)\n                dat2 <- data.frame(dat,subject=tmp[,subject])\n                m <- ncol(dat)\n                # find out, in which columns are the wholeplot or subplot factors\n                s1<-subset(dat2, dat2$subject==dat2$subject[1])\n                measurements <- dim(s1)[1]\n                countSubplotFactor <- 1\n                wholeplot<-rep(-1, m)\n                subplot<-rep(-1, m)\n                for(i in 2:m){\n                  if(length(unique(s1[,i]))==nlevels(dat2[,i])){\n                    subplot[i]<-1\n                    countSubplotFactor <- countSubplotFactor*nlevels(s1[,i])\n                  }\n                  else{\n                    wholeplot[i]<-1\n                  }\n                }\n                wholeplot <- which(wholeplot==1)\n                subplot <- which( subplot==1)\n                factors <- list(colnames(dat)[wholeplot], colnames(dat)[subplot])\n                \n                # showing results\n                gui.results(result$test, factors, RGtk2::gtkEntryGetText(decEntry), RGtk2::gtkEntryGetText(sepEntry))\n              }, error = function(e) {GUI_error(e,NULL) \n                errorOccured <<- 1})\n            \n            # if there are only two factors; 1 whole- and 1 subplot-facor, then plot the profiles\n            if(nfactors == 2 & !is.null(groupFactor) & !is.null(timeFactor) & errorOccured == 0){\n              tryCatch(responseVariable <- as.character(terms.formula(formula)[[2]]), warning = function(w) \"\", error = function(e) \"\" )\n              if(is.character(responseVariable)){\n                print(\"Profiles are being plotted ...\")\n                #dev.new() # first graphics device is within RStudio\n                #dev.new() # show plot using new graphics device (i.e. separate window for plot); easer than drawing with cairoDevice\n                GUI_plot()\n                tryCatch({\n                  print(hrm.plot(data = tmp, group = groupFactor, factor1 = timeFactor, subject = subject, response = responseVariable, xlab = \"dimension\", ylab = \"means\"))\n                }, error = function(e) \"\", warning = function(w)  \"\")\n              }\n            }\n          } else {\n            GUI_error(NULL, \"The type-I error rate needs to be within the interval (0, 1).\")\n          }\n        }\n        if(RGtk2::gtkEntryGetText(type1Entry) == \"\"){\n          GUI_error(NULL, \"The type-I error rate is missing.\")\n        }\n\n      } else {\n        GUI_error(NULL, \"Formula or column for the subject is missing.\")\n      }\n    } else {\n      GUI_error(NULL, \"Please check your input for the formula or the subject column.\")\n    }\n    \n\n  }\n\n  \n  RGtk2:: gSignalConnect(loadButton, \"clicked\", getDirectory)\n  RGtk2:: gSignalConnect(columnsCombo, \"changed\", setFormulaCombo)\n  RGtk2:: gSignalConnect(columnsSCombo, \"changed\", setFormulaComboS)\n  RGtk2:: gSignalConnect(plusButton, \"clicked\", setFormulaPlus)\n  RGtk2:: gSignalConnect(interactionButton, \"clicked\", setFormulaInteraction)\n  RGtk2:: gSignalConnect(fullButton, \"clicked\", setFormulaFull)\n  RGtk2:: gSignalConnect(explButton, \"clicked\", setFormulaExpl)\n  RGtk2:: gSignalConnect(okButton, \"clicked\", calculate)\n  RGtk2:: gSignalConnect(closeButton, \"clicked\", window$destroy)\n\n}\n\n#' Function for presenting error messages to the user\n#' \n#' @param e exception\n#' @param msg message to be presented to the end user\n#' @keywords internal\nGUI_error <- function(e, msg){\n  windowE <- RGtk2::gtkWindow()\n  windowE[\"title\"] <- \"HRM\"\n  \n  frameE <- RGtk2::gtkFrameNew(\"Error\")\n  windowE$add(frameE)\n  \n  vBoxE <- RGtk2::gtkVBoxNew()\n  vBoxE$setBorderWidth(20)\n  frameE$add(vBoxE)   #add vBox to the frame\n  \n  hBoxE <- RGtk2::gtkHBoxNew(spacing= 10) #distance between elements\n  hBoxE$setBorderWidth(20)\n  vBoxE$packStart(hBoxE, F, F, 0)\n  \n  hBoxE$packStart(RGtk2::gtkLabelNewWithMnemonic(msg), F, F, 0)\n  \n  hBoxE2 <- RGtk2::gtkHBoxNew(spacing= 10) #distance between elements\n  hBoxE2$setBorderWidth(20)\n  vBoxE$packStart(hBoxE2, F, F, 0)\n  hBoxE2$packStart(RGtk2::gtkLabelNewWithMnemonic(e$message), F, F, 0)\n  \n  hBoxE3 <- RGtk2::gtkHBoxNew(spacing= 10) #distance between elements\n  hBoxE3$setBorderWidth(20)\n  vBoxE$packStart(hBoxE3, F, F, 0)\n\n  closeButton <- RGtk2::gtkButton(\"OK\")\n  hBoxE3$packStart(closeButton, T, T, 0)\n  RGtk2:: gSignalConnect(closeButton, \"clicked\", windowE$destroy)\n  \n}\n\nGUI_plot <- function(){\n  win <- RGtk2::gtkWindow(show = FALSE)\n  win[\"title\"] <- \"HRM\"\n  win$setDefaultSize(400, 400)\n  \n  quit_cb <- function(widget, window){\n    window$destroy()\n  }\n  save_cb <- function(widget, window){\n    tryCatch(directory <- tclvalue(tkchooseDirectory(initialdir=getwd())), error = function(e){  \"\" }, warning = function(w) \"\")\n    if(!is.null(directory) & !is.na(directory) & directory != \"\"){\n      tryCatch({ggsave(path = \"C:\\\\Users\\\\b1011921\\\\Desktop\\\\\", filename = \"Plot_HRM.pdf\")\n      }, error = function(e) { GUI_error(e, \"An error occured while saving the results:\")})\n    }\n  }\n  actions <- list(\n    list(\"FileMenu\", NULL, \"_File\"),\n    #  list(\"Open\", \"gtk-open\", \"_Open File\", \"<control>O\", \"Open CSV\", quit_cb),\n    list(\"Save\", \"gtk-save\", \"_Save File\", \"<control>S\", \"Save CSV\", save_cb),\n    list(\"Exit\", \"gtk-quit\", \"E_xit\", \"<control>X\", \"Exit\", quit_cb)\n  )\n  action_group <- RGtk2::gtkActionGroup(\"spreadsheetActions\")\n  action_group$addActions(actions, win)\n  \n  uiManager <- RGtk2::gtkUIManager()\n  uiManager$insertActionGroup(action_group, 0)\n  merge <- uiManager$newMergeId()\n  # File Menu\n  uiManager$addUi(merge.id = merge, path = \"/\", name = \"menubar\",\n                  action = NULL, type = \"menubar\", top = FALSE)\n  uiManager$addUi(merge, \"/menubar\", \"file\", \"FileMenu\", \"menu\", FALSE)\n  #uiManager$addUi(merge, \"/menubar/file\", \"open\", \"Open\", \"menuitem\", FALSE)\n  uiManager$addUi(merge, \"/menubar/file\", \"save\", \"Save\", \"menuitem\", FALSE)\n  uiManager$addUi(merge, \"/menubar/file\", NULL, NULL, \"separator\", FALSE)\n  uiManager$addUi(merge, \"/menubar/file\", \"exit\", \"Exit\", \"menuitem\", FALSE)\n  \n  # Toobar\n  uiManager$addUi(merge, \"/\", \"toolbar\", NULL, \"toolbar\", FALSE)\n  #uiManager$addUi(merge, \"/toolbar\", \"open\", \"Open\", \"toolitem\", FALSE)\n  uiManager$addUi(merge, \"/toolbar\", \"save\", \"Save\", \"toolitem\", FALSE)\n  uiManager$addUi(merge, \"/toolbar\", \"exit\", \"Exit\", \"toolitem\", FALSE)\n  \n  menubar <- uiManager$getWidget(\"/menubar\")\n  toolbar <- uiManager$getWidget(\"/toolbar\")\n  win$addAccelGroup(uiManager$getAccelGroup())\n  \n  graphics <- RGtk2::gtkDrawingArea()\n  vBox <- RGtk2::gtkVBox()\n  vBox$packStart(menubar, expand = FALSE, fill = FALSE, padding = 0)\n  vBox$packStart(toolbar, FALSE, FALSE, 0)\n  vBox$packStart(graphics, expand = TRUE, fill = TRUE, padding = 0)\n  win$add(vBox)\n  cairoDevice::asCairoDevice(graphics)\n  win$show()\n}\n\n",
    "created" : 1502714896664.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2563534708",
    "id" : "1672FDD9",
    "lastKnownWriteTime" : 1501915070,
    "last_content_update" : 1501915070,
    "path" : "P:/Dropbox/Masterarbeit/repeated measures/package/Repeated/R/GUI.R",
    "project_path" : "R/GUI.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}