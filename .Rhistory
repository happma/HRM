#' @param factor3 column name within the data frame data specifying the the third subplot-factor
#' @param subject column name within the data frame X identifying the subjects
#' @param response column name within the data frame X containing the response variable
#' @return Returns a data frame consisting of the degrees of freedom, the test value, the critical value and the p-value
#' @example R/example_2.txt
#' @keywords export
hrm.test.dataframe <- function(data, alpha = 0.05, group , subgroup, factor1, factor2, factor3, subject, response ){
temp <- data
data <- response
X <- temp
if(missing(group) || !is.character(group)){
print("At least one between-subject factor is needed!")
stop("group column name not specified ")
}
if(missing(factor1) || !is.character(factor1)){
print("At least one between-subject factor is needed!")
stop("factor1 column name not specified ")
}
if(!missing(factor1) & !missing(factor2) & !missing(factor3) & !missing(group)  & !missing(subgroup)  ){
stop("The maximum number of factors that can be used is four.")
}
if(missing(X) || !is.data.frame(X)){
stop("dataframe needed")
}
if(missing(subject) || !is.character(subject)){
stop("subject column name not specified")
}
if(missing(data) || !is.character(data)){
stop("data column name not specified")
}
if(sum(is.na(X[,data]))>=1){
warning("Your data contains missing values!")
}
if(!is.double(alpha)){
stop("alpha level needs to be a number between 0 and 1")
}
if(is.double(alpha)){
if(alpha > 1 || alpha < 0){
stop("alpha level needs to be a number between 0 and 1")
}
}
dat <- X
dat <- data.frame(dat, subj = X[,subject])
s1<-subset(dat, dat$subj==dat$subj[1])
measurements <- dim(s1)[1]
countSubplotFactor <- nlevels(s1[,factor1])
if(!missing(factor2)){
countSubplotFactor <- countSubplotFactor*nlevels(s1[,factor2])
}
if(!missing(factor3)){
countSubplotFactor <- countSubplotFactor*nlevels(s1[,factor3])
}
if(!(measurements == countSubplotFactor)){
stop(paste("The number of repeated measurements per subject (", measurements, ") is uneqal to the number of levels of the subplot factors (", countSubplotFactor, ")."))
}
if(missing(factor2) & missing(subgroup) & missing(factor3)){
if(!is.factor(X[,group])){
stop(paste("The column ", group, " is not a factor." ))
}
if(!is.factor(X[,factor1])){
stop(paste("The column ", factor1, " is not a factor." ))
}
return(hrm.test.2.one(X, alpha, group , factor1, subject, data ))
}
if(missing(factor2) & !missing(subgroup) & missing(factor3)){
if(!is.character(subgroup)){
stop("subgroup column name not specified")
}
if(!is.factor(X[,group])){
stop(paste("The column ", group, " is not a factor." ))
}
if(!is.factor(X[,subgroup])){
stop(paste("The column ", subgroup, " is not a factor." ))
}
if(!is.factor(X[,factor1])){
stop(paste("The column ", factor1, " is not a factor." ))
}
return(hrm.test.2.between(X, alpha, group , subgroup, factor1, subject, data ))
}
if(!missing(factor2) & missing(subgroup) & missing(factor3)){
if(!is.character(factor2)){
stop("factor2 column name not specified")
}
if(!is.factor(X[,group])){
stop(paste("The column ", group, " is not a factor." ))
}
if(!is.factor(X[,factor2])){
stop(paste("The column ", factor2, " is not a factor." ))
}
if(!is.factor(X[,factor1])){
stop(paste("The column ", factor1, " is not a factor." ))
}
return(hrm.test.2.within(X, alpha, group , factor1, factor2, subject, data ))
}
if(!missing(factor2) & !missing(subgroup) & missing(factor3)){
if(!is.character(factor2)){
stop("factor2 column name not specified")
}
if(!is.character(subgroup)){
stop("subgroup column name not specified")
}
if(!is.factor(X[,group])){
stop(paste("The column ", group, " is not a factor." ))
}
if(!is.factor(X[,subgroup])){
stop(paste("The column ", subgroup, " is not a factor." ))
}
if(!is.factor(X[,factor1])){
stop(paste("The column ", factor1, " is not a factor." ))
}
if(!is.factor(X[,factor2])){
stop(paste("The column ", factor2, " is not a factor." ))
}
return(hrm.test.2.between.within(X, alpha, group , subgroup, factor1, factor2, subject, data, formula = formula))
}
if(!missing(factor1) & !missing(factor2) & !missing(factor3) & !missing(group)  & missing(subgroup)  ){
if(!is.character(factor1)){
stop("factor1 column name not specified")
}
if(!is.character(factor2)){
stop("factor2 column name not specified")
}
if(!is.character(factor3)){
stop("factor3 column name not specified")
}
if(!is.character(group)){
stop("group column name not specified")
}
if(!is.factor(X[,group])){
stop(paste("The column ", group, " is not a factor." ))
}
if(!is.factor(X[,factor1])){
stop(paste("The column ", factor1, " is not a factor." ))
}
if(!is.factor(X[,factor2])){
stop(paste("The column ", factor2, " is not a factor." ))
}
if(!is.factor(X[,factor3])){
stop(paste("The column ", factor3, " is not a factor." ))
}
formula <- as.formula(paste(data, "~", group, "*", factor1, "*", factor2, "*", factor3))
print(formula)
return(hrm_test(formula=formula,alpha=alpha,subject=subject, data=X ))
}
}
#' Test for main effects and interaction effects of one or two between-subject factors and one, two or three within-subject factors (at most four factors can be used).
#'
#' @param data A data.frame containing the data. The columns containing the factor variables need to have the type 'factor'. One column is needed to indentify the subjects.
#' @param alpha alpha level used for the test
#' @param formula A model formula object. The left hand side contains the response variable and the right hand side contains the whole- and subplot factors.
#' @param subject column name within the data frame X identifying the subjects
#' @return Returns a data frame consisting of the degrees of freedom, the test value, the critical value and the p-value
#' @example R/example_3.txt
#' @keywords export
hrm_test <- function(formula, data, alpha = 0.05,  subject ){
if(missing(data) || !is.data.frame(data)){
stop("dataframe needed")
}
if(missing(subject) || !is.character(subject)){
stop("subject column name not specified")
}
if(!is.double(alpha)){
stop("alpha level needs to be a number between 0 and 1")
}
if(is.double(alpha)){
if(alpha > 1 || alpha < 0){
stop("alpha level needs to be a number between 0 and 1")
}
}
dat <- model.frame(formula, data)
dat2 <- data.frame(dat,subj=data[,subject])
m <- ncol(dat)
if(!is.numeric(dat[,1])){
stop("Response variable needs to be numeric!")
}
# find out, in which columns are the wholeplot or subplot factors
s1<-subset(dat2, dat2$subj==dat2$subj[1])
measurements <- dim(s1)[1]
countSubplotFactor <- 1
wholeplot<-rep(-1, m)
subplot<-rep(-1, m)
for(i in 2:m){
if(!is.factor(dat2[,i])){
stop(paste("The column ", colnames(dat2)[i], " is not a factor." ))
}
if(length(unique(s1[,i]))==nlevels(dat2[,i])){
subplot[i]<-1
countSubplotFactor <- countSubplotFactor*nlevels(s1[,i])
}
else{
wholeplot[i]<-1
}
}
wholeplot <- which(wholeplot==1)
subplot <- which( subplot==1)
if(!(measurements == countSubplotFactor)){
stop(paste("The number of repeated measurements per subject (", measurements, ") is uneqal to the number of levels of the subplot factors (", countSubplotFactor, ")."))
}
if(length(wholeplot)>2){
stop("Too many factors are used! Only two wholelot-factors are supported.")
}
if(length(subplot)>3){
stop("Too many factors are used! Only three subplotlot-factors are supported.")
}
if(length(wholeplot)>1 & length(subplot)==3){
stop("Too many factors are used! Only one whole- and three subplot-factors are supported.")
}
if(length(wholeplot)<1 || length(subplot)<1){
stop("The model needs at least one between-subject factors and one within-subject factors.")
}
if(length(wholeplot)==1 & length(subplot)==1){
group <- colnames(dat2)[wholeplot[1]]
factor1 <- colnames(dat2)[subplot[1]]
x<-attributes(terms.formula(formula))$term.labels
wholeplot<-colnames(dat2[,wholeplot])
subplot<-colnames(dat2[,subplot])
testing <- rep(0,4)
for(i in 1:length(x)){
tmp <- strsplit(x[i],":")
l <- length(tmp[[1]])
# interaction hypothesis of 2 factors
if(l == 2){testing[4]<-1}
else{
if(group == x[i]){
testing[1]<-1
testing[2]<-1
}
else if(factor1 == x[i]){testing[3]<-1}
}
}
X<-data
data <- colnames(dat)[1]
return(hrm.test.2.one(X, alpha, group , factor1, subject, data, testing ))
}
if(length(wholeplot)==2 & length(subplot)==1){
group <- colnames(dat2)[wholeplot[1]]
subgroup <- colnames(dat2)[wholeplot[2]]
factor1 <- colnames(dat2)[subplot[1]]
x<-attributes(terms.formula(formula))$term.labels
wholeplot<-colnames(dat2[,wholeplot])
subplot<-colnames(dat2[,subplot])
testing <- rep(0,7)
for(i in 1:length(x)){
tmp <- strsplit(x[i],":")
l <- length(tmp[[1]])
# interaction hypothesis of 4 factors
if(l == 3){testing[7]<-1}
# find out which interaction hypothesis of 2 factors is tested
else if(l==2){
if(grepl(group,x[i])){
if(grepl(subgroup,x[i])){
testing[4]<-1
}
if(grepl(factor1,x[i])){
testing[5]<-1
}
}
else if(grepl(subgroup,x[i])){
if(grepl(factor1,x[i])){
testing[6]<-1
}
}
}
# l = 1
else{
if(group == x[i]){testing[1]<-1}
else if(subgroup == x[i]){testing[2]<-1}
else if(factor1 == x[i]){testing[3]<-1}
}
}
X<-data
data <- colnames(dat)[1]
return(hrm.test.2.between(X, alpha, group , subgroup, factor1, subject, data, testing ))
}
if(length(wholeplot)==1 & length(subplot)==2){
group <- colnames(dat2)[wholeplot[1]]
factor1 <- colnames(dat2)[subplot[1]]
factor2 <- colnames(dat2)[subplot[2]]
x<-attributes(terms.formula(formula))$term.labels
wholeplot<-colnames(dat2[,wholeplot])
subplot<-colnames(dat2[,subplot])
testing <- rep(0,7)
for(i in 1:length(x)){
tmp <- strsplit(x[i],":")
l <- length(tmp[[1]])
# interaction hypothesis of 3 factors
if(l == 3){testing[7]<-1}
# find out which interaction hypothesis of 2 factors is tested
else if(l==2){
if(grepl(group,x[i])){
if(grepl(factor1,x[i])){
testing[4]<-1
}
if(grepl(factor2,x[i])){
testing[5]<-1
}
}
else if(grepl(factor1,x[i])){
testing[6]<-1
}
}
# l = 1
else{
if(group == x[i]){testing[1]<-1}
else if(factor1 == x[i]){testing[2]<-1}
else {testing[3]<-1}
}
}
X<-data
data <- colnames(dat)[1]
return(hrm.test.2.within(X, alpha, group , factor1, factor2, subject, data, testing ))
}
if(length(wholeplot)==1 & length(subplot)==3){
group <- colnames(dat2)[wholeplot[1]]
factor1 <- colnames(dat2)[subplot[1]]
factor2 <- colnames(dat2)[subplot[2]]
factor3 <- colnames(dat2)[subplot[3]]
x<-attributes(terms.formula(formula))$term.labels
wholeplot<-colnames(dat2[,wholeplot])
subplot<-colnames(dat2[,subplot])
testing <- rep(0,15)
for(i in 1:length(x)){
tmp <- strsplit(x[i],":")
l <- length(tmp[[1]])
# interaction hypothesis of 3 factors
if(l == 4){testing[15]<-1}
# find out which interaction hypothesis of 3 factors is tested
else if(l==3){
if(grepl(group,x[i])){
if(grepl(factor1,x[i])){
if(grepl(factor2,x[i])){
testing[11]<-1
}
else{
testing[12]<-1
}
}
if(grepl(factor2,x[i])){
if(grepl(factor3,x[i])){
testing[13]<-1
}
}
}
else if(grepl(factor1,x[i])){
testing[14]<-1
}
}
# l = 2
else if (l==2){
if(grepl(group,x[i])){
if(grepl(factor1,x[i])){
testing[5]<-1
}
if(grepl(factor2,x[i])){
testing[6]<-1
}
if(grepl(factor3,x[i])){
testing[7]<-1
}
}
else if(grepl(factor1,x[i])){
if(grepl(factor2,x[i])){
testing[8]<-1
}
if(grepl(factor3,x[i])){
testing[9]<-1
}
}
else if(grepl(factor2,x[i])){
if(grepl(factor3,x[i])){
testing[10]<-1
}
}
}
else if(l==1){
if(grepl(group, x[[i]])){
testing[1]<-1
}
if(grepl(factor1, x[[i]])){
testing[2]<-1
}
if(grepl(factor2, x[[i]])){
testing[3]<-1
}
if(grepl(factor3, x[[i]])){
testing[4]<-1
}
}
}
X<-data
data <- colnames(dat)[1]
return(hrm.test.3.between(X, alpha, group , factor1, factor2, factor3, subject, data, testing ))
}
if(length(wholeplot)==2 & length(subplot)==2){
group <- colnames(dat2)[wholeplot[1]]
subgroup <- colnames(dat2)[wholeplot[2]]
factor1 <- colnames(dat2)[subplot[1]]
factor2 <- colnames(dat2)[subplot[2]]
x<-attributes(terms.formula(formula))$term.labels
wholeplot<-colnames(dat2[,wholeplot])
subplot<-colnames(dat2[,subplot])
testing <- rep(0,15)
for(i in 1:length(x)){
tmp <- strsplit(x[i],":")
l <- length(tmp[[1]])
# interaction hypothesis of 4 factors
if(l == 4){testing[15]<-1}
# find out which interaction hypothesis of 3 factors is tested
else if(l==3){
if(grepl(group,x[i])){
if(grepl(subgroup,x[i])){
if(grepl(factor1,x[i])){
testing[11]<-1
}
else{
testing[12]<-1
}
}
else{
testing[13]<-1
}
}
else{
testing[14]<-1
}
}
# find out which interaction hypothesis of 2 factors is tested
else if(l==2){
if(grepl(group,x[i])){
if(grepl(subgroup,x[i])){
testing[5]<-1
}
if(grepl(factor1,x[i])){
testing[6]<-1
}
if(grepl(factor2,x[i])){
testing[7]<-1
}
}
else if(grepl(subgroup,x[i])){
if(grepl(factor1,x[i])){
testing[8]<-1
}
if(grepl(factor2,x[i])){
testing[9]<-1
}
}
else if(grepl(factor1,x[i])){
if(grepl(factor2,x[i])){
testing[10]<-1
}
}
}
# l = 1
else{
if(group == x[i]){testing[1]<-1}
else if(subgroup == x[i]){testing[2]<-1}
else if(factor1 == x[i]){testing[3]<-1}
else {testing[4]<-1}
}
}
X<-data
data <- colnames(dat)[1]
return(hrm.test.2.between.within(X, alpha, group , subgroup, factor1, factor2, subject, data, testing, formula ))
}
}
df
print(df)
print(df, include.rownames=FALSE)
print(df, include.rownames=FALSE)
print(df, row.names = FALSE)
install.packages("HRM")
kronecker
kronecker(P(1), P(8))
P
P(8)
P(1)
cat(c("whole", "sub"))
cat(c("whole", "sub"))
cat(c("whole", "sub", sep=", "))
cat(c("wholeplot", "subplot", sep=", "))
cat(c("wholeplot", "subplot"), sep=", ")
paste("wholeplot factors: ", cat(c("wholeplot", "subplot"), sep=", "))
cat("wholeplot factors: ", cat(c("wholeplot", "subplot"), sep=", "))
cat(cat(c("wholeplot", "subplot"), sep=", "), "wholeplot factors: ")
cat("Summary")
r <- as.formula(value ~ group + (1  | subject))
r
attributes(terms.formula(r))$term.labels
r <- as.formula(value ~ group*dimension + (1  | subject))
attributes(terms.formula(r))$term.labels
r <- as.formula(value ~ group*dimension | subject)
attributes(terms.formula(r))$term.labels
r <- as.formula(value ~ group*dimension + | subject)
r <- as.formula(value ~ group*dimension + 1 | subject)
attributes(terms.formula(r))$term.labels
remove.packages("HRM", lib="~/R/win-library/3.4")
install.packages("C:/Users/Martin/Dropbox/Masterarbeit/repeated measures/package/HRM_0.6.9.tar.gz", repos = NULL, type = "source")
library("HRM", lib.loc="~/R/win-library/3.4")
hrm_test(value ~ group*sex*region*variable, EEG, subject="subject")
hrm_test(value ~ group*sex*region*variable, EEG, subject="subject")
library("HRM", lib.loc="~/R/win-library/3.4")
hrm_test(value ~ group*sex*region*variable, EEG, subject="subject")
r <- hrm_test(value ~ group*sex*region*variable, EEG, subject="subject")
str(r)
r$result
r$formula
r$alpha
r$subject
r$factors
summary(r)
r$result
